{"version":3,"sources":["components/Contador.jsx","components/ListaDeAlumnos.jsx","database/data.js","App.js","serviceWorker.js","index.js"],"names":["Contador","incrementar","state","valor","alert","setState","decrementar","deQueColorEs","parametro","className","this","onClick","React","Component","ListaDeAlumnos","props","filtrarPorLetra","variableAFiltrar","prompt","length","result","alumnos","filter","e","first_name","includes","resetAlumnos","alumnoData","map","key","id","Alumno","last_name","data","dni","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.383501e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Contador extends React.Component {\r\n\r\n   constructor() {\r\n      super()\r\n\r\n      this.state = {\r\n         valor: 0,\r\n      }\r\n   }\r\n   /* Incrementar  */\r\n   incrementar = () => {\r\n      if (this.state.valor >= 10) return alert('El valor no puede valer mas que 10')\r\n      this.setState({ valor: this.state.valor + 1 })\r\n   }\r\n   /* Decrementar  */\r\n   decrementar = () => {\r\n      if (this.state.valor <= 0) return alert('El valor no puede valer menos que 0')\r\n      this.setState({ valor: this.state.valor - 1 })\r\n   }\r\n   /* Validación */\r\n   deQueColorEs = (parametro) => {\r\n      if (parametro < 5) return 'numero-bajo'\r\n      else if (parametro < 8) return 'numero-correcto'\r\n      else return 'numero-alto'\r\n\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"Contador\">\r\n            <h2 className=\"title\">Contador</h2>\r\n            <h3>Mi Valor es: <span className={this.deQueColorEs(this.state.valor)}>{this.state.valor}</span></h3>\r\n            <button className=\"cambiadorDeNumeros\" onClick={this.incrementar}>Incrementar</button>\r\n            <button className=\"cambiadorDeNumeros\" onClick={this.decrementar}>Decrementar</button>\r\n            <p className=\"descripcionEjercicio\">\r\n               Ejercicio: Realizar un contador que tenga 2 límites. No puede incrementar más de 10 y no puede incrementar menos de 0. Así mismo tiene que tener una esacala de colores Amarillo es bajo, Verde es intermedio y Rojo es alto.\r\n            </p>\r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react';\r\n\r\nexport default class ListaDeAlumnos extends React.Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         alumnos: props.alumnoData\r\n      }\r\n   }\r\n\r\n   filtrarPorLetra = () => {\r\n      let variableAFiltrar = prompt()\r\n      if (variableAFiltrar !== '' && variableAFiltrar.length == 1) {\r\n         const result = this.state.alumnos.filter(e => e.first_name.includes(variableAFiltrar))\r\n         this.setState({ alumnos: result })\r\n      } else if (variableAFiltrar !== '' && variableAFiltrar.length > 1){\r\n         alert('No puedes introducir mas de 1 caracteres')\r\n      } \r\n      else{\r\n         alert('No se filtro ya que no se ha ingresado ninguna letra')\r\n      }\r\n\r\n   }\r\n\r\n   resetAlumnos = () => {\r\n      this.setState({ alumnos: this.props.alumnoData })\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>Lista De Alumnos</h1>\r\n\r\n            <button className=\"botonAlumnos\" onClick={this.filtrarPorLetra}> Filtro por Letra</button>\r\n\r\n            <button className=\"botonAlumnos\" onClick={this.resetAlumnos}> Resetear información</button>\r\n\r\n            <p>Cantidad de alumnos: {this.state.alumnos.length}</p>\r\n\r\n            <ul>\r\n               {this.state.alumnos.map(e => <Alumno key={e.id} alumnoData={e} />)}\r\n            </ul>\r\n\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst Alumno = (props) => {\r\n   return (\r\n      <li>\r\n         <p>ID: {props.alumnoData.id}</p>\r\n         <p>Nombre: {props.alumnoData.first_name}</p>\r\n         <p>Apellido: {props.alumnoData.last_name}</p>\r\n      </li>\r\n   )\r\n}","const data = [\r\n   {\r\n      id: 0, first_name: 'Alejandro', last_name: 'Sobko', dni: 44647702\r\n   },\r\n   {\r\n      id: 1, first_name: 'Laura', last_name: 'Perez', dni: 35302288\r\n   },\r\n   {\r\n      id: 2, first_name: 'Candela', last_name: 'Gomez', dni: 57490871\r\n   },\r\n   {\r\n      id: 3, first_name: 'Emiliano', last_name: 'Gonzalez', dni: 66005465\r\n   },\r\n   {\r\n      id: 4, first_name: 'Camila', last_name: 'Rodriguez', dni: 65212571\r\n   },\r\n   {\r\n      id: 5, first_name: 'Sebastian', last_name: 'Hernandez', dni: 54101823\r\n   },\r\n   {\r\n      id: 6, first_name: 'Ezequiel', last_name: 'Blabla', dni: 57238635\r\n   },\r\n   {\r\n      id: 7, first_name: 'Melina', last_name: 'Foo', dni: 34251397\r\n   },\r\n   {\r\n      id: 8, first_name: 'Gustavo', last_name: 'Bar', dni: 64530537\r\n   },\r\n   {\r\n      id: 9, first_name: 'José', last_name: 'Baz', dni: 40073217\r\n   }\r\n]\r\n\r\nexport default data;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Contador from './components/Contador'\r\nimport ListaDeAlumnos from './components/ListaDeAlumnos'\r\nimport data from './database/data'\r\n\r\nfunction App() {\r\n   return (\r\n      <div className=\"App\">\r\n\r\n         <Contador />\r\n         <hr />\r\n         <ListaDeAlumnos alumnoData={data} />\r\n\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}